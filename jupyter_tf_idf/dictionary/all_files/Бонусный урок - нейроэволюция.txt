Данный урок оказался немного оторванным от остального курса, поэтому нужно добавить информации перед его прохождением.

Речь пойдёт об алгоритме для подбора параметров нейронных сетей, так что вкратце обговорим их  устройство, чтобы понимать о чём идёт речь. Нейронные сети можно представлять как набор нейронов, соединённых связями. Каждый нейрон - это вычислительная единица, принимающая числовые значения от входных связей, умножающая их на соответствующие им веса. Затем получившиеся результаты складываются, и к ним применяется активационная функция нейрона. Результат передаётся по выходным связям.
То есть нейронную сеть можно представить как граф, где вершинами являются нейроны, а рёбрами - связи между ними. Пространственно нейроны обычно организованы в виде слоёв, и информация (значения переменных во входных данных и результаты вычислений нейронов) передаётся слева направо.
На рисунке выше приведена схема нейронной сети - слева на нейроны поступают значения переменных для наблюдения, они процессируются нейронами 1-ого слоя и результат вычислений передаётся на нейроны 2-ого слоя по связям, и так далее. Последний слой предсказывает класс (в случае классификации).

В отличие от решающих деревьев и Random Forest нейронные сети потрясающе разнообразны - число нейронов, их расположение по слоям, активационные функции, наличие связей между нейронами и их величина могут варьироваться для получения более эффективных нейронных сетей.

Об одном из способов подбора этих параметров и пойдёт речь.
Нейроэволюция не является наиболее используемым методом подбора модели по причине больших временных затрат - необходимо на каждом шаге проверять успешность каждой из моделей в популяции. Но возможность искать более успешные топологии является его явным преимуществом.
Нужно отметить, что, как говорилось, разные методы машинного обучения лучше подходят к различным задачам. Вдобавок к этому ML не всегда является оптимальным подходом - при наличии чёткого аналитического решения нужно использовать его, так как обычно оно требует меньше ресурсов и полностью проработано (понятно почему получается такой результат, меньше ошибка). Например, рассчитывать пройденное расстояние, зная скорость и время лучше по формуле, чем обучая модель на тестовых данных)