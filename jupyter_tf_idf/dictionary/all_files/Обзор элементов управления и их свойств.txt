Чтобы как-то взаимодействовать с пользователем, получать от пользователя ввод с клавиатуры или мыши и использовать введенные данные в программе, нам нужны элементы управления. WPF предлагает нам богатый стандартный набор элементов управления

Все элементы управления могут быть условно разделены на несколько подгрупп:

Элементы управления содержимым, например кнопки (Button), метки (Label)

Специальные контейнеры, которые содержат другие элементы, но в отличие от элементов Grid или Canvas не являются контейнерами компоновки - ScrollViewer,GroupBox

Декораторы, чье предназначение создание определенного фона вокруг вложенных элементов, например, Border или Viewbox.

Элементы управления списками, например, ListBox, ComboBox.

Текстовые элементы управления, например, TextBox, RichTextBox.

Элементы, основанные на диапазонах значений, например, ProgressBar, Slider.

Элементы для работ с датами, например, DatePicker и Calendar.

Остальные элементы управления, которые не вошли в предыдущие подгруппы, например, Image.
В основе WPF лежит модель STA (Single-Thread Affinity), согласно которой за пользовательский интерфейс отвечает один поток. И чтобы пользовательский интерфейс мог взаимодействовать с другими потоками, WPF использует концепцию диспетчера - специального объекта, управляющего обменом сообщениями, через которые взаимодействуют потоки. Наследование типов от класса DispatcherObject позволяет получить доступ к подобному объекту-диспетчеру и и другим функциям по управлению параллелизмом.
Наследование от этого класса позволяет взаимодействовать с элементами в приложении через их специальную модель свойств, которые называются свойствами зависимостей (dependency properties). Эта модель упрощает применение ряда особенностей WPF, например, привязки данных. Так, система свойств зависимостей отслеживает зависимости между значениями свойств, автоматически проверяет их и изменяет при изменении зависимости.
Класс Visual содержит инструкции, которые отвечают за отрисовку, визуализацию объекта.
Класс UIElement добавляет возможности по компоновке элемента, обработку событий и получение ввода.	
Класс FrameworkElement добавляет поддержку привязки данных, анимации, стилй. Также добавляет ряд свойств, связанных с компоновкой (выравнивание, отступы) и ряд других.
Класс Control представляет элемент управления, с которым взаимодействует пользователь. Этот класс добавляет ряд дополнительных свойств для поддержки элементами шрифтов, цветов фона, шрифта, а также добавляет поддержку шаблонов - специального механизма в WPF, который позволяет изменять стандартное представление элемента, кастомизировать его.

И далее от класса Control наследуются непосредственно конкретные элементы управления или их базовые классы, которые получают весь функционал, добавляемый к типам в этой иерархии классов.

Рассмотрим некоторые из основных свойств, которые наследуются элементами управления.
FontFamily - определяет семейство шрифта (например, Arial, Verdana и т.д.)

FontSize - определяет высоту шрифта

FontStyle - определяет наклон шрифта, принимает одно из трех значений - Normal, Italic,Oblique.

FontWeight - определяет толщину шрифта и принимает ряд значений, как Black,Bold и др.

FontStretch - определяет, как будет растягивать или сжимать текст, например, значение Condensed сжимает текст, а Expanded - расстягивает.